# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.64.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finapi.models.single_money_transfer_recipient_data import SingleMoneyTransferRecipientData  # noqa: F401,E501


class RequestSepaMoneyTransferParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recipient_name': 'str',
        'recipient_iban': 'str',
        'recipient_bic': 'str',
        'clearing_account_id': 'str',
        'amount': 'float',
        'purpose': 'str',
        'sepa_purpose_code': 'str',
        'account_id': 'int',
        'banking_pin': 'str',
        'store_pin': 'bool',
        'two_step_procedure_id': 'str',
        'challenge_response': 'str',
        'execution_date': 'str',
        'single_booking': 'bool',
        'additional_money_transfers': 'list[SingleMoneyTransferRecipientData]'
    }

    attribute_map = {
        'recipient_name': 'recipientName',
        'recipient_iban': 'recipientIban',
        'recipient_bic': 'recipientBic',
        'clearing_account_id': 'clearingAccountId',
        'amount': 'amount',
        'purpose': 'purpose',
        'sepa_purpose_code': 'sepaPurposeCode',
        'account_id': 'accountId',
        'banking_pin': 'bankingPin',
        'store_pin': 'storePin',
        'two_step_procedure_id': 'twoStepProcedureId',
        'challenge_response': 'challengeResponse',
        'execution_date': 'executionDate',
        'single_booking': 'singleBooking',
        'additional_money_transfers': 'additionalMoneyTransfers'
    }

    def __init__(self, recipient_name=None, recipient_iban=None, recipient_bic=None, clearing_account_id=None, amount=None, purpose=None, sepa_purpose_code=None, account_id=None, banking_pin=None, store_pin=False, two_step_procedure_id=None, challenge_response=None, execution_date=None, single_booking=False, additional_money_transfers=None):  # noqa: E501
        """RequestSepaMoneyTransferParams - a model defined in Swagger"""  # noqa: E501

        self._recipient_name = None
        self._recipient_iban = None
        self._recipient_bic = None
        self._clearing_account_id = None
        self._amount = None
        self._purpose = None
        self._sepa_purpose_code = None
        self._account_id = None
        self._banking_pin = None
        self._store_pin = None
        self._two_step_procedure_id = None
        self._challenge_response = None
        self._execution_date = None
        self._single_booking = None
        self._additional_money_transfers = None
        self.discriminator = None

        if recipient_name is not None:
            self.recipient_name = recipient_name
        if recipient_iban is not None:
            self.recipient_iban = recipient_iban
        if recipient_bic is not None:
            self.recipient_bic = recipient_bic
        if clearing_account_id is not None:
            self.clearing_account_id = clearing_account_id
        self.amount = amount
        if purpose is not None:
            self.purpose = purpose
        if sepa_purpose_code is not None:
            self.sepa_purpose_code = sepa_purpose_code
        self.account_id = account_id
        if banking_pin is not None:
            self.banking_pin = banking_pin
        if store_pin is not None:
            self.store_pin = store_pin
        if two_step_procedure_id is not None:
            self.two_step_procedure_id = two_step_procedure_id
        if challenge_response is not None:
            self.challenge_response = challenge_response
        if execution_date is not None:
            self.execution_date = execution_date
        if single_booking is not None:
            self.single_booking = single_booking
        if additional_money_transfers is not None:
            self.additional_money_transfers = additional_money_transfers

    @property
    def recipient_name(self):
        """Gets the recipient_name of this RequestSepaMoneyTransferParams.  # noqa: E501

        Name of the recipient. Note: Neither finAPI nor the involved bank servers are guaranteed to validate the recipient name. Even if the recipient name does not depict the actual registered account holder of the specified recipient account, the money transfer request might still be successful. This field is optional only when you pass a clearing account as the recipient. Otherwise, this field is required.  # noqa: E501

        :return: The recipient_name of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this RequestSepaMoneyTransferParams.

        Name of the recipient. Note: Neither finAPI nor the involved bank servers are guaranteed to validate the recipient name. Even if the recipient name does not depict the actual registered account holder of the specified recipient account, the money transfer request might still be successful. This field is optional only when you pass a clearing account as the recipient. Otherwise, this field is required.  # noqa: E501

        :param recipient_name: The recipient_name of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._recipient_name = recipient_name

    @property
    def recipient_iban(self):
        """Gets the recipient_iban of this RequestSepaMoneyTransferParams.  # noqa: E501

        IBAN of the recipient's account. This field is optional only when you pass a clearing account as the recipient. Otherwise, this field is required.  # noqa: E501

        :return: The recipient_iban of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._recipient_iban

    @recipient_iban.setter
    def recipient_iban(self, recipient_iban):
        """Sets the recipient_iban of this RequestSepaMoneyTransferParams.

        IBAN of the recipient's account. This field is optional only when you pass a clearing account as the recipient. Otherwise, this field is required.  # noqa: E501

        :param recipient_iban: The recipient_iban of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._recipient_iban = recipient_iban

    @property
    def recipient_bic(self):
        """Gets the recipient_bic of this RequestSepaMoneyTransferParams.  # noqa: E501

        BIC of the recipient's account. Note: This field is optional when you pass a clearing account as the recipient or if the bank connection of the account that you want to transfer money from supports the IBAN-Only money transfer. You can find this out via GET /bankConnections/<id>. Also note that when a BIC is given, then this BIC will be used for the money transfer request independent of whether it is required or not (unless you pass a clearing account, in which case this field will always be ignored).  # noqa: E501

        :return: The recipient_bic of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._recipient_bic

    @recipient_bic.setter
    def recipient_bic(self, recipient_bic):
        """Sets the recipient_bic of this RequestSepaMoneyTransferParams.

        BIC of the recipient's account. Note: This field is optional when you pass a clearing account as the recipient or if the bank connection of the account that you want to transfer money from supports the IBAN-Only money transfer. You can find this out via GET /bankConnections/<id>. Also note that when a BIC is given, then this BIC will be used for the money transfer request independent of whether it is required or not (unless you pass a clearing account, in which case this field will always be ignored).  # noqa: E501

        :param recipient_bic: The recipient_bic of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._recipient_bic = recipient_bic

    @property
    def clearing_account_id(self):
        """Gets the clearing_account_id of this RequestSepaMoneyTransferParams.  # noqa: E501

        Identifier of a clearing account. If this field is set, then the fields 'recipientName', 'recipientIban' and 'recipientBic' will be ignored and the recipient account will be the specified clearing account.  # noqa: E501

        :return: The clearing_account_id of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._clearing_account_id

    @clearing_account_id.setter
    def clearing_account_id(self, clearing_account_id):
        """Sets the clearing_account_id of this RequestSepaMoneyTransferParams.

        Identifier of a clearing account. If this field is set, then the fields 'recipientName', 'recipientIban' and 'recipientBic' will be ignored and the recipient account will be the specified clearing account.  # noqa: E501

        :param clearing_account_id: The clearing_account_id of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._clearing_account_id = clearing_account_id

    @property
    def amount(self):
        """Gets the amount of this RequestSepaMoneyTransferParams.  # noqa: E501

        The amount to transfer. Must be a positive decimal number with at most two decimal places (e.g. 99.99)  # noqa: E501

        :return: The amount of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RequestSepaMoneyTransferParams.

        The amount to transfer. Must be a positive decimal number with at most two decimal places (e.g. 99.99)  # noqa: E501

        :param amount: The amount of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def purpose(self):
        """Gets the purpose of this RequestSepaMoneyTransferParams.  # noqa: E501

        The purpose of the transfer transaction  # noqa: E501

        :return: The purpose of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this RequestSepaMoneyTransferParams.

        The purpose of the transfer transaction  # noqa: E501

        :param purpose: The purpose of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def sepa_purpose_code(self):
        """Gets the sepa_purpose_code of this RequestSepaMoneyTransferParams.  # noqa: E501

        SEPA purpose code, according to ISO 20022, external codes set.  # noqa: E501

        :return: The sepa_purpose_code of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._sepa_purpose_code

    @sepa_purpose_code.setter
    def sepa_purpose_code(self, sepa_purpose_code):
        """Sets the sepa_purpose_code of this RequestSepaMoneyTransferParams.

        SEPA purpose code, according to ISO 20022, external codes set.  # noqa: E501

        :param sepa_purpose_code: The sepa_purpose_code of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._sepa_purpose_code = sepa_purpose_code

    @property
    def account_id(self):
        """Gets the account_id of this RequestSepaMoneyTransferParams.  # noqa: E501

        Identifier of the bank account that you want to transfer money from  # noqa: E501

        :return: The account_id of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RequestSepaMoneyTransferParams.

        Identifier of the bank account that you want to transfer money from  # noqa: E501

        :param account_id: The account_id of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def banking_pin(self):
        """Gets the banking_pin of this RequestSepaMoneyTransferParams.  # noqa: E501

        Online banking PIN. Any symbols are allowed. Max length: 170. If a PIN is stored in the bank connection, then this field may remain unset. If finAPI's web form is not required and the field is set though then it will always be used (even if there is some other PIN stored in the bank connection). If you want the user to enter a PIN in finAPI's web form even when a PIN is stored, then just set the field to any value, so that the service recognizes that you wish to use the web form flow.  # noqa: E501

        :return: The banking_pin of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._banking_pin

    @banking_pin.setter
    def banking_pin(self, banking_pin):
        """Sets the banking_pin of this RequestSepaMoneyTransferParams.

        Online banking PIN. Any symbols are allowed. Max length: 170. If a PIN is stored in the bank connection, then this field may remain unset. If finAPI's web form is not required and the field is set though then it will always be used (even if there is some other PIN stored in the bank connection). If you want the user to enter a PIN in finAPI's web form even when a PIN is stored, then just set the field to any value, so that the service recognizes that you wish to use the web form flow.  # noqa: E501

        :param banking_pin: The banking_pin of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._banking_pin = banking_pin

    @property
    def store_pin(self):
        """Gets the store_pin of this RequestSepaMoneyTransferParams.  # noqa: E501

        Whether to store the PIN. If the PIN is stored, it is not required to pass the PIN again when executing SEPA orders. Default value is 'false'. <br/><br/>NOTES:<br/> - before you set this field to true, please regard the 'pinsAreVolatile' flag of the bank connection that the account belongs to;<br/> - this field is ignored in case when the user will need to use finAPI's web form. The user will be able to decide whether to store the PIN or not in the web form, depending on the 'pinStorageAvailableInWebForm' setting (see Client Configuration).  # noqa: E501

        :return: The store_pin of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: bool
        """
        return self._store_pin

    @store_pin.setter
    def store_pin(self, store_pin):
        """Sets the store_pin of this RequestSepaMoneyTransferParams.

        Whether to store the PIN. If the PIN is stored, it is not required to pass the PIN again when executing SEPA orders. Default value is 'false'. <br/><br/>NOTES:<br/> - before you set this field to true, please regard the 'pinsAreVolatile' flag of the bank connection that the account belongs to;<br/> - this field is ignored in case when the user will need to use finAPI's web form. The user will be able to decide whether to store the PIN or not in the web form, depending on the 'pinStorageAvailableInWebForm' setting (see Client Configuration).  # noqa: E501

        :param store_pin: The store_pin of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: bool
        """

        self._store_pin = store_pin

    @property
    def two_step_procedure_id(self):
        """Gets the two_step_procedure_id of this RequestSepaMoneyTransferParams.  # noqa: E501

        The bank-given ID of the two-step-procedure that should be used for the order. For a list of available two-step-procedures, see the corresponding bank connection (GET /bankConnections). If this field is not set, then the bank connection's default two-step-procedure will be used. Note that in this case, when the bank connection has no default two-step-procedure set, then the response of the service depends on whether you need to use finAPI's web form or not. If you need to use the web form, the user will be prompted to select the two-step-procedure within the web form. If you don't need to use the web form, then the service will return an error (passing a value for this field is required in this case).  # noqa: E501

        :return: The two_step_procedure_id of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._two_step_procedure_id

    @two_step_procedure_id.setter
    def two_step_procedure_id(self, two_step_procedure_id):
        """Sets the two_step_procedure_id of this RequestSepaMoneyTransferParams.

        The bank-given ID of the two-step-procedure that should be used for the order. For a list of available two-step-procedures, see the corresponding bank connection (GET /bankConnections). If this field is not set, then the bank connection's default two-step-procedure will be used. Note that in this case, when the bank connection has no default two-step-procedure set, then the response of the service depends on whether you need to use finAPI's web form or not. If you need to use the web form, the user will be prompted to select the two-step-procedure within the web form. If you don't need to use the web form, then the service will return an error (passing a value for this field is required in this case).  # noqa: E501

        :param two_step_procedure_id: The two_step_procedure_id of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._two_step_procedure_id = two_step_procedure_id

    @property
    def challenge_response(self):
        """Gets the challenge_response of this RequestSepaMoneyTransferParams.  # noqa: E501

        Challenge response. This field should be set only when the previous attempt to request a SEPA money transfer failed with HTTP code 510, i.e. the bank sent a challenge for the user for an additional authentication. In this case, this field must contain the response to the bank's challenge. Please note that in case of using finAPI's web form you have to leave this field unset and the application will automatically recognize that the user has to input challenge response and then a web form will be shown to the user.  # noqa: E501

        :return: The challenge_response of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._challenge_response

    @challenge_response.setter
    def challenge_response(self, challenge_response):
        """Sets the challenge_response of this RequestSepaMoneyTransferParams.

        Challenge response. This field should be set only when the previous attempt to request a SEPA money transfer failed with HTTP code 510, i.e. the bank sent a challenge for the user for an additional authentication. In this case, this field must contain the response to the bank's challenge. Please note that in case of using finAPI's web form you have to leave this field unset and the application will automatically recognize that the user has to input challenge response and then a web form will be shown to the user.  # noqa: E501

        :param challenge_response: The challenge_response of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._challenge_response = challenge_response

    @property
    def execution_date(self):
        """Gets the execution_date of this RequestSepaMoneyTransferParams.  # noqa: E501

        Execution date for the money transfer(s), in the format 'YYYY-MM-DD'. If not specified, then the current date will be used.  # noqa: E501

        :return: The execution_date of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: str
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this RequestSepaMoneyTransferParams.

        Execution date for the money transfer(s), in the format 'YYYY-MM-DD'. If not specified, then the current date will be used.  # noqa: E501

        :param execution_date: The execution_date of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: str
        """

        self._execution_date = execution_date

    @property
    def single_booking(self):
        """Gets the single_booking of this RequestSepaMoneyTransferParams.  # noqa: E501

        This field is only regarded when you pass multiple orders. It determines whether the orders should be processed by the bank as one collective booking (in case of 'false'), or as single bookings (in case of 'true'). Default value is 'false'.  # noqa: E501

        :return: The single_booking of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: bool
        """
        return self._single_booking

    @single_booking.setter
    def single_booking(self, single_booking):
        """Sets the single_booking of this RequestSepaMoneyTransferParams.

        This field is only regarded when you pass multiple orders. It determines whether the orders should be processed by the bank as one collective booking (in case of 'false'), or as single bookings (in case of 'true'). Default value is 'false'.  # noqa: E501

        :param single_booking: The single_booking of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: bool
        """

        self._single_booking = single_booking

    @property
    def additional_money_transfers(self):
        """Gets the additional_money_transfers of this RequestSepaMoneyTransferParams.  # noqa: E501

        In case that you want to submit not just a single money transfer, but do a collective money transfer, use this field to pass a list of additional money transfer orders. The service will then pass a collective money transfer request to the bank, including both the money transfer specified on the top-level, as well as all money transfers specified in this list. The maximum count of money transfers that you can pass (in total) is 15000. Note that you should check the account's 'supportedOrders' field to find out whether or not it is supporting collective money transfers.  # noqa: E501

        :return: The additional_money_transfers of this RequestSepaMoneyTransferParams.  # noqa: E501
        :rtype: list[SingleMoneyTransferRecipientData]
        """
        return self._additional_money_transfers

    @additional_money_transfers.setter
    def additional_money_transfers(self, additional_money_transfers):
        """Sets the additional_money_transfers of this RequestSepaMoneyTransferParams.

        In case that you want to submit not just a single money transfer, but do a collective money transfer, use this field to pass a list of additional money transfer orders. The service will then pass a collective money transfer request to the bank, including both the money transfer specified on the top-level, as well as all money transfers specified in this list. The maximum count of money transfers that you can pass (in total) is 15000. Note that you should check the account's 'supportedOrders' field to find out whether or not it is supporting collective money transfers.  # noqa: E501

        :param additional_money_transfers: The additional_money_transfers of this RequestSepaMoneyTransferParams.  # noqa: E501
        :type: list[SingleMoneyTransferRecipientData]
        """

        self._additional_money_transfers = additional_money_transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestSepaMoneyTransferParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestSepaMoneyTransferParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
