# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.64.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BankConnectionOwner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'salutation': 'str',
        'title': 'str',
        'email': 'str',
        'date_of_birth': 'str',
        'post_code': 'str',
        'country': 'str',
        'city': 'str',
        'street': 'str',
        'house_number': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'salutation': 'salutation',
        'title': 'title',
        'email': 'email',
        'date_of_birth': 'dateOfBirth',
        'post_code': 'postCode',
        'country': 'country',
        'city': 'city',
        'street': 'street',
        'house_number': 'houseNumber'
    }

    def __init__(self, first_name=None, last_name=None, salutation=None, title=None, email=None, date_of_birth=None, post_code=None, country=None, city=None, street=None, house_number=None):  # noqa: E501
        """BankConnectionOwner - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._salutation = None
        self._title = None
        self._email = None
        self._date_of_birth = None
        self._post_code = None
        self._country = None
        self._city = None
        self._street = None
        self._house_number = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if salutation is not None:
            self.salutation = salutation
        if title is not None:
            self.title = title
        if email is not None:
            self.email = email
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if post_code is not None:
            self.post_code = post_code
        if country is not None:
            self.country = country
        if city is not None:
            self.city = city
        if street is not None:
            self.street = street
        if house_number is not None:
            self.house_number = house_number

    @property
    def first_name(self):
        """Gets the first_name of this BankConnectionOwner.  # noqa: E501

        First name  # noqa: E501

        :return: The first_name of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this BankConnectionOwner.

        First name  # noqa: E501

        :param first_name: The first_name of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this BankConnectionOwner.  # noqa: E501

        Last name  # noqa: E501

        :return: The last_name of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this BankConnectionOwner.

        Last name  # noqa: E501

        :param last_name: The last_name of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def salutation(self):
        """Gets the salutation of this BankConnectionOwner.  # noqa: E501

        Salutation  # noqa: E501

        :return: The salutation of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this BankConnectionOwner.

        Salutation  # noqa: E501

        :param salutation: The salutation of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._salutation = salutation

    @property
    def title(self):
        """Gets the title of this BankConnectionOwner.  # noqa: E501

        Title  # noqa: E501

        :return: The title of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BankConnectionOwner.

        Title  # noqa: E501

        :param title: The title of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def email(self):
        """Gets the email of this BankConnectionOwner.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BankConnectionOwner.

        Email  # noqa: E501

        :param email: The email of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this BankConnectionOwner.  # noqa: E501

        Date of birth (in format 'YYYY-MM-DD')  # noqa: E501

        :return: The date_of_birth of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this BankConnectionOwner.

        Date of birth (in format 'YYYY-MM-DD')  # noqa: E501

        :param date_of_birth: The date_of_birth of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._date_of_birth = date_of_birth

    @property
    def post_code(self):
        """Gets the post_code of this BankConnectionOwner.  # noqa: E501

        Post code  # noqa: E501

        :return: The post_code of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this BankConnectionOwner.

        Post code  # noqa: E501

        :param post_code: The post_code of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def country(self):
        """Gets the country of this BankConnectionOwner.  # noqa: E501

        Country  # noqa: E501

        :return: The country of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankConnectionOwner.

        Country  # noqa: E501

        :param country: The country of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this BankConnectionOwner.  # noqa: E501

        City  # noqa: E501

        :return: The city of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BankConnectionOwner.

        City  # noqa: E501

        :param city: The city of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def street(self):
        """Gets the street of this BankConnectionOwner.  # noqa: E501

        Street  # noqa: E501

        :return: The street of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this BankConnectionOwner.

        Street  # noqa: E501

        :param street: The street of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def house_number(self):
        """Gets the house_number of this BankConnectionOwner.  # noqa: E501

        House number  # noqa: E501

        :return: The house_number of this BankConnectionOwner.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this BankConnectionOwner.

        House number  # noqa: E501

        :param house_number: The house_number of this BankConnectionOwner.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankConnectionOwner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankConnectionOwner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
