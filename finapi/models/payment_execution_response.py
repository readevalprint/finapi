# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.64.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentExecutionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success_message': 'str',
        'warn_message': 'str',
        'payment_id': 'int'
    }

    attribute_map = {
        'success_message': 'successMessage',
        'warn_message': 'warnMessage',
        'payment_id': 'paymentId'
    }

    def __init__(self, success_message=None, warn_message=None, payment_id=None):  # noqa: E501
        """PaymentExecutionResponse - a model defined in Swagger"""  # noqa: E501

        self._success_message = None
        self._warn_message = None
        self._payment_id = None
        self.discriminator = None

        if success_message is not None:
            self.success_message = success_message
        if warn_message is not None:
            self.warn_message = warn_message
        self.payment_id = payment_id

    @property
    def success_message(self):
        """Gets the success_message of this PaymentExecutionResponse.  # noqa: E501

        Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.  # noqa: E501

        :return: The success_message of this PaymentExecutionResponse.  # noqa: E501
        :rtype: str
        """
        return self._success_message

    @success_message.setter
    def success_message(self, success_message):
        """Sets the success_message of this PaymentExecutionResponse.

        Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.  # noqa: E501

        :param success_message: The success_message of this PaymentExecutionResponse.  # noqa: E501
        :type: str
        """

        self._success_message = success_message

    @property
    def warn_message(self):
        """Gets the warn_message of this PaymentExecutionResponse.  # noqa: E501

        In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.  # noqa: E501

        :return: The warn_message of this PaymentExecutionResponse.  # noqa: E501
        :rtype: str
        """
        return self._warn_message

    @warn_message.setter
    def warn_message(self, warn_message):
        """Sets the warn_message of this PaymentExecutionResponse.

        In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.  # noqa: E501

        :param warn_message: The warn_message of this PaymentExecutionResponse.  # noqa: E501
        :type: str
        """

        self._warn_message = warn_message

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentExecutionResponse.  # noqa: E501

        Payment identifier. Can be used to retrieve the status of the payment (see 'Get payments' service).  # noqa: E501

        :return: The payment_id of this PaymentExecutionResponse.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentExecutionResponse.

        Payment identifier. Can be used to retrieve the status of the payment (see 'Get payments' service).  # noqa: E501

        :param payment_id: The payment_id of this PaymentExecutionResponse.  # noqa: E501
        :type: int
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501

        self._payment_id = payment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentExecutionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentExecutionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
