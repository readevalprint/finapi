# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.64.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finapi.models.error_details import ErrorDetails  # noqa: F401,E501


class ErrorMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errors': 'list[ErrorDetails]',
        '_date': 'str',
        'request_id': 'str',
        'endpoint': 'str',
        'auth_context': 'str',
        'bank': 'str'
    }

    attribute_map = {
        'errors': 'errors',
        '_date': 'date',
        'request_id': 'requestId',
        'endpoint': 'endpoint',
        'auth_context': 'authContext',
        'bank': 'bank'
    }

    def __init__(self, errors=None, _date=None, request_id=None, endpoint=None, auth_context=None, bank=None):  # noqa: E501
        """ErrorMessage - a model defined in Swagger"""  # noqa: E501

        self._errors = None
        self.__date = None
        self._request_id = None
        self._endpoint = None
        self._auth_context = None
        self._bank = None
        self.discriminator = None

        self.errors = errors
        self._date = _date
        if request_id is not None:
            self.request_id = request_id
        self.endpoint = endpoint
        self.auth_context = auth_context
        if bank is not None:
            self.bank = bank

    @property
    def errors(self):
        """Gets the errors of this ErrorMessage.  # noqa: E501

        List of errors  # noqa: E501

        :return: The errors of this ErrorMessage.  # noqa: E501
        :rtype: list[ErrorDetails]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ErrorMessage.

        List of errors  # noqa: E501

        :param errors: The errors of this ErrorMessage.  # noqa: E501
        :type: list[ErrorDetails]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def _date(self):
        """Gets the _date of this ErrorMessage.  # noqa: E501

        Server date of when the error(s) occurred, in the format YYYY-MM-DD HH:MM:SS.SSS  # noqa: E501

        :return: The _date of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ErrorMessage.

        Server date of when the error(s) occurred, in the format YYYY-MM-DD HH:MM:SS.SSS  # noqa: E501

        :param _date: The _date of this ErrorMessage.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def request_id(self):
        """Gets the request_id of this ErrorMessage.  # noqa: E501

        ID of the request that caused this error. This is either what you have passed for the header 'X-REQUEST-ID', or an auto-generated ID in case you didn't pass any value for that header.  # noqa: E501

        :return: The request_id of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ErrorMessage.

        ID of the request that caused this error. This is either what you have passed for the header 'X-REQUEST-ID', or an auto-generated ID in case you didn't pass any value for that header.  # noqa: E501

        :param request_id: The request_id of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def endpoint(self):
        """Gets the endpoint of this ErrorMessage.  # noqa: E501

        The service endpoint that was called  # noqa: E501

        :return: The endpoint of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ErrorMessage.

        The service endpoint that was called  # noqa: E501

        :param endpoint: The endpoint of this ErrorMessage.  # noqa: E501
        :type: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def auth_context(self):
        """Gets the auth_context of this ErrorMessage.  # noqa: E501

        Information about the authorization context of the service call  # noqa: E501

        :return: The auth_context of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._auth_context

    @auth_context.setter
    def auth_context(self, auth_context):
        """Sets the auth_context of this ErrorMessage.

        Information about the authorization context of the service call  # noqa: E501

        :param auth_context: The auth_context of this ErrorMessage.  # noqa: E501
        :type: str
        """
        if auth_context is None:
            raise ValueError("Invalid value for `auth_context`, must not be `None`")  # noqa: E501

        self._auth_context = auth_context

    @property
    def bank(self):
        """Gets the bank of this ErrorMessage.  # noqa: E501

        BLZ and name (in format \"<BLZ> - <name>\") of a bank that was used for the original request  # noqa: E501

        :return: The bank of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this ErrorMessage.

        BLZ and name (in format \"<BLZ> - <name>\") of a bank that was used for the original request  # noqa: E501

        :param bank: The bank of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._bank = bank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
