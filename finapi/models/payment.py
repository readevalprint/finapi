# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.64.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'request_date': 'str',
        'execution_date': 'str',
        'type': 'str',
        'status': 'str',
        'bank_message': 'str',
        'amount': 'float',
        'order_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'request_date': 'requestDate',
        'execution_date': 'executionDate',
        'type': 'type',
        'status': 'status',
        'bank_message': 'bankMessage',
        'amount': 'amount',
        'order_count': 'orderCount'
    }

    def __init__(self, id=None, account_id=None, request_date=None, execution_date=None, type=None, status=None, bank_message=None, amount=None, order_count=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._account_id = None
        self._request_date = None
        self._execution_date = None
        self._type = None
        self._status = None
        self._bank_message = None
        self._amount = None
        self._order_count = None
        self.discriminator = None

        self.id = id
        self.account_id = account_id
        self.request_date = request_date
        if execution_date is not None:
            self.execution_date = execution_date
        self.type = type
        self.status = status
        if bank_message is not None:
            self.bank_message = bank_message
        self.amount = amount
        self.order_count = order_count

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501

        Payment identifier  # noqa: E501

        :return: The id of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        Payment identifier  # noqa: E501

        :param id: The id of this Payment.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Payment.  # noqa: E501

        Identifier of the account to which this payment relates  # noqa: E501

        :return: The account_id of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Payment.

        Identifier of the account to which this payment relates  # noqa: E501

        :param account_id: The account_id of this Payment.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def request_date(self):
        """Gets the request_date of this Payment.  # noqa: E501

        Time of when this payment was requested, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)  # noqa: E501

        :return: The request_date of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this Payment.

        Time of when this payment was requested, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)  # noqa: E501

        :param request_date: The request_date of this Payment.  # noqa: E501
        :type: str
        """
        if request_date is None:
            raise ValueError("Invalid value for `request_date`, must not be `None`")  # noqa: E501

        self._request_date = request_date

    @property
    def execution_date(self):
        """Gets the execution_date of this Payment.  # noqa: E501

        Time of when this payment was executed, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)  # noqa: E501

        :return: The execution_date of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this Payment.

        Time of when this payment was executed, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)  # noqa: E501

        :param execution_date: The execution_date of this Payment.  # noqa: E501
        :type: str
        """

        self._execution_date = execution_date

    @property
    def type(self):
        """Gets the type of this Payment.  # noqa: E501

        Payment type  # noqa: E501

        :return: The type of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Payment.

        Payment type  # noqa: E501

        :param type: The type of this Payment.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["MONEY_TRANSFER", "DIRECT_DEBIT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this Payment.  # noqa: E501

        Current payment status:<br/> &bull; PENDING: means that this payment has been requested, but not yet executed.<br/> &bull; SUCCESSFUL: means that this payment has been successfully executed.<br/> &bull; NOT_SUCCESSFUL: means that this payment could not be executed successfully.<br/> &bull; DISCARDED: means that this payment was discarded because another payment was requested for the same account before this payment was executed.  # noqa: E501

        :return: The status of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        Current payment status:<br/> &bull; PENDING: means that this payment has been requested, but not yet executed.<br/> &bull; SUCCESSFUL: means that this payment has been successfully executed.<br/> &bull; NOT_SUCCESSFUL: means that this payment could not be executed successfully.<br/> &bull; DISCARDED: means that this payment was discarded because another payment was requested for the same account before this payment was executed.  # noqa: E501

        :param status: The status of this Payment.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "SUCCESSFUL", "NOT_SUCCESSFUL", "DISCARDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def bank_message(self):
        """Gets the bank_message of this Payment.  # noqa: E501

        Contains the bank's response to the execution of this payment. This field is not set until the payment gets executed. Note that even after the execution of the payment, the field might still not be set, if the bank did not send any response message.  # noqa: E501

        :return: The bank_message of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._bank_message

    @bank_message.setter
    def bank_message(self, bank_message):
        """Sets the bank_message of this Payment.

        Contains the bank's response to the execution of this payment. This field is not set until the payment gets executed. Note that even after the execution of the payment, the field might still not be set, if the bank did not send any response message.  # noqa: E501

        :param bank_message: The bank_message of this Payment.  # noqa: E501
        :type: str
        """

        self._bank_message = bank_message

    @property
    def amount(self):
        """Gets the amount of this Payment.  # noqa: E501

        Total money amount of the payment order(s), as absolute value  # noqa: E501

        :return: The amount of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.

        Total money amount of the payment order(s), as absolute value  # noqa: E501

        :param amount: The amount of this Payment.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def order_count(self):
        """Gets the order_count of this Payment.  # noqa: E501

        Total count of orders included in this payment  # noqa: E501

        :return: The order_count of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """Sets the order_count of this Payment.

        Total count of orders included in this payment  # noqa: E501

        :param order_count: The order_count of this Payment.  # noqa: E501
        :type: int
        """
        if order_count is None:
            raise ValueError("Invalid value for `order_count`, must not be `None`")  # noqa: E501

        self._order_count = order_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
