# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.64.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finapi.models.category import Category  # noqa: F401,E501


class KeywordRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'category': 'Category',
        'direction': 'str',
        'creation_date': 'str',
        'keywords': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'direction': 'direction',
        'creation_date': 'creationDate',
        'keywords': 'keywords'
    }

    def __init__(self, id=None, category=None, direction=None, creation_date=None, keywords=None):  # noqa: E501
        """KeywordRule - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._category = None
        self._direction = None
        self._creation_date = None
        self._keywords = None
        self.discriminator = None

        self.id = id
        self.category = category
        self.direction = direction
        self.creation_date = creation_date
        self.keywords = keywords

    @property
    def id(self):
        """Gets the id of this KeywordRule.  # noqa: E501

        Rule identifier  # noqa: E501

        :return: The id of this KeywordRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KeywordRule.

        Rule identifier  # noqa: E501

        :param id: The id of this KeywordRule.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def category(self):
        """Gets the category of this KeywordRule.  # noqa: E501

        The category that this rule assigns to the transactions that it matches  # noqa: E501

        :return: The category of this KeywordRule.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this KeywordRule.

        The category that this rule assigns to the transactions that it matches  # noqa: E501

        :param category: The category of this KeywordRule.  # noqa: E501
        :type: Category
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def direction(self):
        """Gets the direction of this KeywordRule.  # noqa: E501

        Direction for the rule. 'Income' means that the rule applies to transactions with a positive amount only, 'Spending' means it applies to transactions with a negative amount only.  # noqa: E501

        :return: The direction of this KeywordRule.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this KeywordRule.

        Direction for the rule. 'Income' means that the rule applies to transactions with a positive amount only, 'Spending' means it applies to transactions with a negative amount only.  # noqa: E501

        :param direction: The direction of this KeywordRule.  # noqa: E501
        :type: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501
        allowed_values = ["Income", "Spending"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def creation_date(self):
        """Gets the creation_date of this KeywordRule.  # noqa: E501

        Timestamp of when the rule was created, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)  # noqa: E501

        :return: The creation_date of this KeywordRule.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this KeywordRule.

        Timestamp of when the rule was created, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time)  # noqa: E501

        :param creation_date: The creation_date of this KeywordRule.  # noqa: E501
        :type: str
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def keywords(self):
        """Gets the keywords of this KeywordRule.  # noqa: E501

        Set of keywords that this rule defines.  # noqa: E501

        :return: The keywords of this KeywordRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this KeywordRule.

        Set of keywords that this rule defines.  # noqa: E501

        :param keywords: The keywords of this KeywordRule.  # noqa: E501
        :type: list[str]
        """
        if keywords is None:
            raise ValueError("Invalid value for `keywords`, must not be `None`")  # noqa: E501

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeywordRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeywordRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
